using System;
using UnityEngine;

public class GameInput : MonoBehaviour 
{
    /// <summary>
    /// Used in Input System, object of a class in autogenerated script
    /// </summary>
    private PlayerInputActions playerInputActions; 
    
    /// <summary>
    /// We have single game input system - so use singleton pattern
    /// </summary>
    public static GameInput Instance { get; private set; } 

    /// <summary>
    /// For events
    /// </summary>
    public event EventHandler OnDodgerollAction; 
    
    
    /// <summary>
    /// Awake is called when an enabled script instance is being loaded
    /// </summary>
    private void Awake()
    {
        // Check if instance already exists (shouldn't happen)
        if (Instance != null) Debug.Log("Instance of GameInput already exists."); 
        
        Instance = this; // Set singleton instance
        playerInputActions = new PlayerInputActions();
        playerInputActions.Player.Enable();

        playerInputActions.Player.Dodgeroll.performed += Dodgeroll_performed; // Subscribe PlayerMovement to the event
    }

    /// <summary>
    /// Create event
    /// </summary>
    /// <param name="obj"></param>
    private void Dodgeroll_performed(UnityEngine.InputSystem.InputAction.CallbackContext obj) 
    {
        OnDodgerollAction?.Invoke(this, EventArgs.Empty); // Invoke logic when event happens (dodgeroll in our case)
    }

    /// <summary>
    /// We get this vector to use it in PlayerMovement to move
    /// </summary>
    /// <returns></returns>
    public Vector2 GetMovementVectorNormalized() 
    {
        Vector2 inputVector =  playerInputActions.Player.Move.ReadValue<Vector2>();

        inputVector = inputVector.normalized;

        return inputVector;
    }
}
